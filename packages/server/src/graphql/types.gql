input BookFilters {
  authors: [String]
  genres: [String]
}

input Pagination {
  limit: Int
  offset: Int
}

type Query {
  getBooks(
    query: String,
    filters: BookFilters,
    pagination: Pagination
  ): BookConnection
  getBook(id: String!): Book

  getUserCollection: UserCollection

  getAuthors(
    query: String,
    pagination: Pagination
  ): AuthorConnection
  getAuthor(id: String!): Author

  getEnhancementsForBook(bookId: String!): [Enhancement!]!
  getSubscriptions(bookId: String): [Enhancement!]!
  getSubscribedEnhancementsForBook(bookId: String!): [Enhancement!]!

  getAuthenticatedUser: User!

  getBooksInCollection: [Book!]!

  #getGenres: [Genre!]!
  #getGenre(id: String!): Genre
  #getSubscriptionsForUser(userId: String!): [Subscription!]!
}

type Mutation {
  createBook(
    title: String!,
    description: String,
    coverUrl: String,
    assetUrl: String,
    authors: [String],
    genres: [String],
  ): Book
  #updateBook(
  #  id: String!,
  #  title: String,
  #  description: String,
  #  coverUrl: String,
  #  assetUrl: String,
  #  authors: [String],
  #  genres: [String],
  #): Book
  deleteBook(id: String!): Book

  createAuthor(
    userId: String,
    displayName: String!,
    bookIds: [String],
  ): Author
  #updateAuthor(
  #  id: String!,
  #  userId: String,
  #  bookIds: [String],
  #): Author
  #deleteAuthor(id: String!): Author

  createSubscription(enhancementId: String!, role: Role): Subscription

  createUserCollection: UserCollection
  addBookToUserCollection(bookId: String!): UserCollection
  removeBookFromUserCollection(bookId: String!): UserCollection

  updatePersonalization(
    themeMode: ThemeMode,
    readerFontSize: Int,
    readerFontStyle: ReaderFontPreference
  ): Personalization

  createEnhancement(
    title: String!,
    bookId: String!,
    includedTypes: [EnhancementType!]!,
    isDefault: Boolean,
  ): Enhancement


  #createGenre(
  #  name: String!,
  #  bookIds: [String],
  #): Genre
  # updateGenre(
  #   id: String!,
  #   name: String,
  #   bookIds: [String],
  #): Genre
  #deleteGenre(id: String!): Genre

  # updateEnhancement(
  #   id: String!,
  #   title: String,
  #   data: String,
  #   bookId: String,
  #   includedTypes: [String],
  # ): Enhancement
  # deleteEnhancement(id: String!): Enhancement
  # createSubscription(
  #   userId: String!,
  #   enhancementId: String!,
  #   role: Role!,
  # ): Subscription
  # updateSubscription(
  #   id: String!,
  #   userId: String,
  #   enhancementId: String,
  #   role: Role,
  # ): Subscription
  # deleteSubscription(id: String!): Subscription
  # createEnhancementEvent(
  #   operation: String!,
  #   enhancementId: String!,
  #   createdBy: String!,
  #   type: String!,
  # ): EnhancementEvent
  # updateEnhancementEvent(
  #   id: String!,
  #   operation: String,
  #   enhancementId: String,
  #   createdBy: String,
  #   type: String,
  # ): EnhancementEvent
  # deleteEnhancementEvent(id: String!): EnhancementEvent

  # Auth
  logInWithGoogle(googleAccessToken: String!): AuthResponse
  createUserWithGoogle(googleAccessToken: String!): AuthResponse

  beginEmailLogIn(email: String!): EmailLogInResponse
  completeEmailLogIn(email: String!, verificationCode: String!): AuthResponse
}

type AuthResponse {
  jwt: String!
  success: Boolean!
}

type EmailLogInResponse {
  success: Boolean!
}

type User {
  id: String!
  createdAt: String!
  profilePicture: String
  firstName: String
  lastName: String
  isAdmin: Boolean!
  phone: String
  email: String
  verificationCode: String
  enhancementPatches: [EnhancementPatch!]!
  subscriptions: [Subscription!]!
  personalization: Personalization
}

enum ThemeMode {
  LIGHT
  DARK
  SYSTEM
}

enum ReaderFontPreference {
  MODERN
  SOFT_SERIF
  CLASSIC_SERIF
}

type Personalization {
  themeMode: ThemeMode,
  readerFontSize: Int,
  fontStyle: ReaderFontPreference
}

type Author {
  id: String!
  createdAt: String
  user: User
  displayName: String
  books: [Book!]!
}

type AuthorConnection {
  records: [Author!]!
  pageInfo: PageInfo!
}

type PageInfo {
  offset: Int!,
  hasMore: Boolean!
}

type Book {
  id: String!
  createdAt: String!
  title: String!
  description: String
  coverUrl: String
  assetUrl: String
  authors: [Author]
  enhancements: [Enhancement]
  genres: [Genre]
  hashIndex: String
}

type UserCollection {
  id: String!
  books: [Book!]!
  user: User!
}

type BookConnection {
  records: [Book!]!
  pageInfo: PageInfo!
}

type Genre {
  id: String!
  createdAt: String!
  name: String!
  books: [Book]
}

type Enhancement {
  id: String!
  createdAt: String!
  title: String!
  book: Book!
  includedTypes: [EnhancementType!]!
  subscriptions: [Subscription!]!
  coalescedData: String!
  coalescedTimestamp: String!
  patches: [EnhancementPatch!]!
  isDefault: Boolean
}

type Subscription {
  id: String!
  createdAt: String!
  user: User!
  enhancement: Enhancement!
  role: Role!
}

enum Role {
  ADMIN
  USER
}

type EnhancementPatch {
  id: String!
  createdAt: String!
  operation: String!
  createdBy: User
  type: EnhancementType!
}

enum EnhancementType {
  SUMMARY
  NOTES
  NARRATION
}
