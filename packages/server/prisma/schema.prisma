generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id                   String              @id @unique @default(uuid())
  created_at           DateTime            @default(now()) @db.Timestamptz(6)
  profile_picture      String?
  first_name           String
  last_name            String
  display_name         String
  is_admin             Boolean?            @default(false)
  author_id            String?             @unique
  author               author?
  phone                String?             @unique
  email                String?             @unique
  verification_code    String?
  enhancement_patches  enhancement_patch[]
  subscriptions        subscription[]
  publishers           publisher_user[]
  collections          user_collection[]
}

model author {
  id           String    @id @default(uuid())
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  display_name String?
  user_id      String?   @unique
  user         user?     @relation(fields: [user_id], references: [id])
  books        book[]
  publishers   publisher_author[]
}

enum PublisherType {
  self_published
  traditional
}

model publisher_author {
  id              String    @id @default(uuid())
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  publisher_id    String
  publisher       publisher @relation(fields: [publisher_id], references: [id])
  author_id       String
  author          author    @relation(fields: [author_id], references: [id])
  active          Boolean   @default(true)
}

enum PublisherRole {
  admin
  user
}

model publisher_user {
  id              String    @id @default(uuid())
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  role            PublisherRole
  publisher_id    String
  publisher       publisher @relation(fields: [publisher_id], references: [id])
  user_id         String
  user            user      @relation(fields: [user_id], references: [id])
}

model publisher {
  id              String    @id @default(uuid())
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  name            String?
  type            PublisherType
  authors         publisher_author[]
  users           publisher_user[]
  books           book[]
  enhancements    enhancement[] @relation("enhancement_publisher")
}

model book {
  id            String        @id @unique @default(uuid())
  created_at    DateTime      @default(now()) @db.Timestamptz(6)
  title         String
  description   String?
  cover_url     String?
  thumbnail_url String?
  asset_url     String?       @unique
  authors       author[]
  author_names_cached  String?
  publishers    publisher[]
  enhancements  enhancement[]
  genres        genre[]
  collections   user_collection[]
  hash_index    String?
}

model genre {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  name        String    @unique
  books       book[]
}

enum EnhancementType {
  summary
  notes
  narration
}

enum EmailSubscriptionType {
  major_updates
}

model email_subscription {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  email       String
  types       EmailSubscriptionType[]
}

model enhancement {
  id                        String              @id @unique @default(uuid())
  created_at                DateTime            @default(now()) @db.Timestamptz(6)
  publisher_id              String?
  publisher                 publisher?          @relation("enhancement_publisher", fields: [publisher_id], references: [id])
  title                     String
  coalesced_data            Json?
  coalesced_timestamp       DateTime?
  book_id                   String
  book                      book                @relation(fields: [book_id], references: [id])
  included_types            EnhancementType[]
  patches                   enhancement_patch[] @relation("enhancement_patches")
  subscriptions             subscription[]
  grant_admin_to_publisher  Boolean?            @default(true)
  is_default                Boolean?            @default(false)
}

model subscription {
  id          String      @id @default(uuid())
  created_at  DateTime    @default(now()) @db.Timestamptz(6)
  user_id     String
  user        user        @relation(fields: [user_id], references: [id])
  enhancement_id String
  enhancement enhancement @relation(fields: [enhancement_id], references: [id])
  role        Role
}

enum Role {
  admin
  user
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model enhancement_patch {
  id                  String        @id @default(uuid())
  created_at          DateTime      @default(now()) @db.Timestamptz(6)
  operation           Json
  enhancement_id      String
  enhancement         enhancement   @relation("enhancement_patches", fields: [enhancement_id], references: [id])
  created_by_id       String?
  created_by          user?          @relation(fields: [created_by_id], references: [id])
  type                EnhancementType
}

model user_collection {
  id                  String        @id @default(uuid())
  created_at          DateTime      @default(now()) @db.Timestamptz(6)
  user_id             String
  user                user          @relation(fields: [user_id], references: [id])
  books               book[]
}
