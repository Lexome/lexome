generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                 String              @id @unique @default(uuid())
  created_at         DateTime            @default(now()) @db.Timestamptz(6)
  profile_picture    String?
  first_name         String
  last_name          String
  is_admin           Boolean?            @default(false)
  author_id          String?             @unique
  author             author?
  phone              String?             @unique
  verification_code  String?
  enhancement_events enhancement_event[]
  subscriptions      subscription[]
}

model author {
  id          String    @id @default(uuid())
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  user_id     String    @unique
  user        user      @relation(fields: [user_id], references: [id])
  books       book[]
}

model book {
  id            String        @id @unique @default(uuid())
  created_at    DateTime      @default(now()) @db.Timestamptz(6)
  title         String
  description   String?
  cover_url     String?
  asset_url     String?       @unique
  authors       author[]
  enhancements  enhancement[]
  genres        genre[]
}

model genre {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  name        String    @unique
  books       book[]
}

model enhancement {
  id                       String              @id @unique @default(uuid())
  created_at               DateTime            @default(now()) @db.Timestamptz(6)
  title                    String
  coalesced_data           Json?
  coalesced_timestamp      DateTime?
  book_id                  String
  book                     book                @relation(fields: [book_id], references: [id])
  included_types           enhancement_type[]  @relation()
  update_events            enhancement_event[] @relation("enhancement_events")
  subscriptions            subscription[]
}

model subscription {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  user_id     String
  user        user      @relation(fields: [user_id], references: [id])
  enhancement_id String
  enhancement enhancement @relation(fields: [enhancement_id], references: [id])
  role        Role
}

enum Role {
  admin
  user
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model enhancement_event {
  id                  String        @id @default(uuid())
  created_at          DateTime      @default(now()) @db.Timestamptz(6)
  operation           Json
  enhancement_id      String
  enhancement         enhancement   @relation("enhancement_events", fields: [enhancement_id], references: [id])
  created_by_id       String
  created_by          user          @relation(fields: [created_by_id], references: [id])
  type_id             String
  type                enhancement_type  @relation(fields: [type_id], references: [id])
}

model enhancement_type {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now()) @db.Timestamptz(6)
  slug           String       @unique
  display_name   String       @unique
  enhancements   enhancement[]
  enhancement_events enhancement_event[]
}
